//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AniEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AniEvent), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetAniDelegate", SetAniDelegate);
		L.RegFunction("AniEventCallBack", AniEventCallBack);
		L.RegFunction("SetAniValue", SetAniValue);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAniDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AniEvent obj = (AniEvent)ToLua.CheckObject<AniEvent>(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.SetAniDelegate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AniEventCallBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AniEvent obj = (AniEvent)ToLua.CheckObject<AniEvent>(L, 1);
			obj.AniEventCallBack();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAniValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AniEvent obj = (AniEvent)ToLua.CheckObject<AniEvent>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAniValue(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

