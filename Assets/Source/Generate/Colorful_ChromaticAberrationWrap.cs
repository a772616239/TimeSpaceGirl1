//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Colorful_ChromaticAberrationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Colorful.ChromaticAberration), typeof(Colorful.BaseEffect));
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("RedRefraction", get_RedRefraction, set_RedRefraction);
		L.RegVar("GreenRefraction", get_GreenRefraction, set_GreenRefraction);
		L.RegVar("BlueRefraction", get_BlueRefraction, set_BlueRefraction);
		L.RegVar("PreserveAlpha", get_PreserveAlpha, set_PreserveAlpha);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RedRefraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			float ret = obj.RedRefraction;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RedRefraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GreenRefraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			float ret = obj.GreenRefraction;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GreenRefraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BlueRefraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			float ret = obj.BlueRefraction;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BlueRefraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PreserveAlpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			bool ret = obj.PreserveAlpha;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PreserveAlpha on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RedRefraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.RedRefraction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RedRefraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GreenRefraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.GreenRefraction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GreenRefraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BlueRefraction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.BlueRefraction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BlueRefraction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PreserveAlpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.ChromaticAberration obj = (Colorful.ChromaticAberration)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.PreserveAlpha = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PreserveAlpha on a nil value");
		}
	}
}

