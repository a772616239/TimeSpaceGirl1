//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Colorful_GlitchWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Colorful.Glitch), typeof(Colorful.BaseEffect));
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("RandomActivation", get_RandomActivation, set_RandomActivation);
		L.RegVar("RandomEvery", get_RandomEvery, set_RandomEvery);
		L.RegVar("RandomDuration", get_RandomDuration, set_RandomDuration);
		L.RegVar("Mode", get_Mode, set_Mode);
		L.RegVar("SettingsInterferences", get_SettingsInterferences, set_SettingsInterferences);
		L.RegVar("SettingsTearing", get_SettingsTearing, set_SettingsTearing);
		L.RegVar("IsActive", get_IsActive, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RandomActivation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			bool ret = obj.RandomActivation;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RandomActivation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RandomEvery(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			UnityEngine.Vector2 ret = obj.RandomEvery;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RandomEvery on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RandomDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			UnityEngine.Vector2 ret = obj.RandomDuration;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RandomDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			Colorful.Glitch.GlitchingMode ret = obj.Mode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SettingsInterferences(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			Colorful.Glitch.InterferenceSettings ret = obj.SettingsInterferences;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SettingsInterferences on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SettingsTearing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			Colorful.Glitch.TearingSettings ret = obj.SettingsTearing;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SettingsTearing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsActive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			bool ret = obj.IsActive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsActive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RandomActivation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.RandomActivation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RandomActivation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RandomEvery(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.RandomEvery = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RandomEvery on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RandomDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.RandomDuration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RandomDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			Colorful.Glitch.GlitchingMode arg0 = (Colorful.Glitch.GlitchingMode)ToLua.CheckObject(L, 2, typeof(Colorful.Glitch.GlitchingMode));
			obj.Mode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SettingsInterferences(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			Colorful.Glitch.InterferenceSettings arg0 = (Colorful.Glitch.InterferenceSettings)ToLua.CheckObject<Colorful.Glitch.InterferenceSettings>(L, 2);
			obj.SettingsInterferences = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SettingsInterferences on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SettingsTearing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.Glitch obj = (Colorful.Glitch)o;
			Colorful.Glitch.TearingSettings arg0 = (Colorful.Glitch.TearingSettings)ToLua.CheckObject<Colorful.Glitch.TearingSettings>(L, 2);
			obj.SettingsTearing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SettingsTearing on a nil value");
		}
	}
}

