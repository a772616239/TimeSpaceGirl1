//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Colorful_LoFiPaletteWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Colorful.LoFiPalette), typeof(Colorful.LookupFilter3D));
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Palette", get_Palette, set_Palette);
		L.RegVar("Pixelize", get_Pixelize, set_Pixelize);
		L.RegVar("PixelSize", get_PixelSize, set_PixelSize);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Palette(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.LoFiPalette obj = (Colorful.LoFiPalette)o;
			Colorful.LoFiPalette.Preset ret = obj.Palette;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Palette on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pixelize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.LoFiPalette obj = (Colorful.LoFiPalette)o;
			bool ret = obj.Pixelize;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pixelize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PixelSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.LoFiPalette obj = (Colorful.LoFiPalette)o;
			float ret = obj.PixelSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PixelSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Palette(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.LoFiPalette obj = (Colorful.LoFiPalette)o;
			Colorful.LoFiPalette.Preset arg0 = (Colorful.LoFiPalette.Preset)ToLua.CheckObject(L, 2, typeof(Colorful.LoFiPalette.Preset));
			obj.Palette = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Palette on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pixelize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.LoFiPalette obj = (Colorful.LoFiPalette)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Pixelize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pixelize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PixelSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.LoFiPalette obj = (Colorful.LoFiPalette)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.PixelSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PixelSize on a nil value");
		}
	}
}

