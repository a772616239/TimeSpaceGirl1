//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Colorful_WhiteBalanceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Colorful.WhiteBalance), typeof(Colorful.BaseEffect));
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("White", get_White, set_White);
		L.RegVar("Mode", get_Mode, set_Mode);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_White(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.WhiteBalance obj = (Colorful.WhiteBalance)o;
			UnityEngine.Color ret = obj.White;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index White on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.WhiteBalance obj = (Colorful.WhiteBalance)o;
			Colorful.WhiteBalance.BalanceMode ret = obj.Mode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Mode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_White(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.WhiteBalance obj = (Colorful.WhiteBalance)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.White = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index White on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Colorful.WhiteBalance obj = (Colorful.WhiteBalance)o;
			Colorful.WhiteBalance.BalanceMode arg0 = (Colorful.WhiteBalance.BalanceMode)ToLua.CheckObject(L, 2, typeof(Colorful.WhiteBalance.BalanceMode));
			obj.Mode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Mode on a nil value");
		}
	}
}

