//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameCore_SimplePoolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameCore.SimplePool), typeof(System.Object));
		L.RegFunction("GetOne", GetOne);
		L.RegFunction("CollectOne", CollectOne);
		L.RegFunction("CollectAll", CollectAll);
		L.RegFunction("HideAllUnUse", HideAllUnUse);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateGameCore_SimplePool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnGetOne", get_OnGetOne, set_OnGetOne);
		L.RegVar("OnCollectOne", get_OnCollectOne, set_OnCollectOne);
		L.RegVar("UseList", get_UseList, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameCore_SimplePool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
				GameCore.SimplePool obj = new GameCore.SimplePool(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameCore.SimplePool.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOne(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
				UnityEngine.GameObject o = obj.GetOne();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.GameObject o = obj.GetOne(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCore.SimplePool.GetOne");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CollectOne(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				obj.CollectOne(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.CollectOne(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCore.SimplePool.CollectOne");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CollectAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
				obj.CollectAll();
				return 0;
			}
			else if (count == 2)
			{
				GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.CollectAll(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCore.SimplePool.CollectAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideAllUnUse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
			obj.HideAllUnUse();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameCore.SimplePool obj = (GameCore.SimplePool)ToLua.CheckObject<GameCore.SimplePool>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGetOne(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCore.SimplePool obj = (GameCore.SimplePool)o;
			System.Action<UnityEngine.GameObject> ret = obj.OnGetOne;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnGetOne on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnCollectOne(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCore.SimplePool obj = (GameCore.SimplePool)o;
			System.Action<UnityEngine.GameObject> ret = obj.OnCollectOne;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnCollectOne on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCore.SimplePool obj = (GameCore.SimplePool)o;
			System.Collections.Generic.List<UnityEngine.GameObject> ret = obj.UseList;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGetOne(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCore.SimplePool obj = (GameCore.SimplePool)o;
			System.Action<UnityEngine.GameObject> arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 2);
			obj.OnGetOne = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnGetOne on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnCollectOne(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCore.SimplePool obj = (GameCore.SimplePool)o;
			System.Action<UnityEngine.GameObject> arg0 = (System.Action<UnityEngine.GameObject>)ToLua.CheckDelegate<System.Action<UnityEngine.GameObject>>(L, 2);
			obj.OnCollectOne = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnCollectOne on a nil value");
		}
	}
}

