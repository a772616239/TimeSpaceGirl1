//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_AppConstWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.AppConst), typeof(System.Object));
		L.RegFunction("New", _CreateGameLogic_AppConst);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("GameResName", get_GameResName, null);
		L.RegVar("GameResPath", get_GameResPath, set_GameResPath);
		L.RegVar("GameResRealPath", get_GameResRealPath, set_GameResRealPath);
		L.RegVar("GameLuaSearchPath", get_GameLuaSearchPath, set_GameLuaSearchPath);
		L.RegVar("bundleMode", get_bundleMode, set_bundleMode);
		L.RegVar("isUpdate", get_isUpdate, set_isUpdate);
		L.RegVar("isGuide", get_isGuide, set_isGuide);
		L.RegVar("isOpenGM", get_isOpenGM, set_isOpenGM);
		L.RegVar("isSDK", get_isSDK, set_isSDK);
		L.RegVar("isSDKLogin", get_isSDKLogin, set_isSDKLogin);
		L.RegVar("isOpenTLog", get_isOpenTLog, set_isOpenTLog);
		L.RegVar("isOpenBLog", get_isOpenBLog, set_isOpenBLog);
		L.RegVar("originLan", get_originLan, set_originLan);
		L.RegVar("ChannelType", get_ChannelType, set_ChannelType);
		L.RegVar("DebugMode", get_DebugMode, set_DebugMode);
		L.RegVar("ExampleMode", get_ExampleMode, set_ExampleMode);
		L.RegVar("LuaByteMode", get_LuaByteMode, set_LuaByteMode);
		L.RegVar("luaBundleMode", get_luaBundleMode, set_luaBundleMode);
		L.RegVar("IsLocalServer", get_IsLocalServer, set_IsLocalServer);
		L.RegVar("ShowDebug", get_ShowDebug, set_ShowDebug);
		L.RegVar("TimerInterval", get_TimerInterval, set_TimerInterval);
		L.RegVar("GameFrameRate", get_GameFrameRate, set_GameFrameRate);
		L.RegVar("Channel_ID", get_Channel_ID, set_Channel_ID);
		L.RegVar("PIXELTOWORLD", get_PIXELTOWORLD, set_PIXELTOWORLD);
		L.RegVar("EncyptBytesLength", get_EncyptBytesLength, set_EncyptBytesLength);
		L.RegVar("DOWNLOAD_URL_FORMAT", get_DOWNLOAD_URL_FORMAT, null);
		L.RegVar("Platform", get_Platform, set_Platform);
		L.RegVar("PersistentDataPath", get_PersistentDataPath, set_PersistentDataPath);
		L.RegVar("StreamPath", get_StreamPath, set_StreamPath);
		L.RegVar("AppName", get_AppName, set_AppName);
		L.RegVar("AppPrefix", get_AppPrefix, set_AppPrefix);
		L.RegVar("ExtName", get_ExtName, set_ExtName);
		L.RegVar("ResourcePath", get_ResourcePath, set_ResourcePath);
		L.RegVar("AssetDir", get_AssetDir, set_AssetDir);
		L.RegVar("LuaTempDir", get_LuaTempDir, set_LuaTempDir);
		L.RegVar("AssetRoot", get_AssetRoot, set_AssetRoot);
		L.RegVar("PlatformPath", get_PlatformPath, set_PlatformPath);
		L.RegVar("GameConfig_Url", get_GameConfig_Url, set_GameConfig_Url);
		L.RegVar("IsMaintenance", get_IsMaintenance, set_IsMaintenance);
		L.RegVar("Download_apk_Url", get_Download_apk_Url, set_Download_apk_Url);
		L.RegVar("Download_ipa_Url", get_Download_ipa_Url, set_Download_ipa_Url);
		L.RegVar("JoinRoom_Url", get_JoinRoom_Url, set_JoinRoom_Url);
		L.RegVar("LoginRoot_Url", get_LoginRoot_Url, set_LoginRoot_Url);
		L.RegVar("Download_Resource_Root_Url", get_Download_Resource_Root_Url, set_Download_Resource_Root_Url);
		L.RegVar("Download_Resouces_Url", get_Download_Resouces_Url, set_Download_Resouces_Url);
		L.RegVar("LaQi_JoinRoom_Url", get_LaQi_JoinRoom_Url, set_LaQi_JoinRoom_Url);
		L.RegVar("LoadingMD5Flie", get_LoadingMD5Flie, null);
		L.RegVar("GameVersionFile", get_GameVersionFile, null);
		L.RegVar("UserId", get_UserId, set_UserId);
		L.RegVar("Token", get_Token, set_Token);
		L.RegVar("SdkId", get_SdkId, set_SdkId);
		L.RegVar("OpenId", get_OpenId, set_OpenId);
		L.RegVar("TokenStr", get_TokenStr, set_TokenStr);
		L.RegVar("MiTokenStr", get_MiTokenStr, set_MiTokenStr);
		L.RegVar("SdkChannel", get_SdkChannel, set_SdkChannel);
		L.RegVar("SdkPackageName", get_SdkPackageName, set_SdkPackageName);
		L.RegVar("Url_JoinRoomID", get_Url_JoinRoomID, set_Url_JoinRoomID);
		L.RegVar("LogToServerAddr", get_LogToServerAddr, set_LogToServerAddr);
		L.RegVar("ToServerAddr", get_ToServerAddr, set_ToServerAddr);
		L.RegVar("AppID", get_AppID, set_AppID);
		L.RegVar("AppKey", get_AppKey, null);
		L.RegVar("PrivateKey", get_PrivateKey, null);
		L.RegVar("LoginUrl", get_LoginUrl, set_LoginUrl);
		L.RegVar("LogoutUrl", get_LogoutUrl, set_LogoutUrl);
		L.RegVar("SDKLoginUrl", get_SDKLoginUrl, set_SDKLoginUrl);
		L.RegVar("SessionPlatform", get_SessionPlatform, set_SessionPlatform);
		L.RegVar("Session", get_Session, set_Session);
		L.RegVar("Code", get_Code, set_Code);
		L.RegVar("ConnectTimeout", get_ConnectTimeout, set_ConnectTimeout);
		L.RegVar("HttpTimeout", get_HttpTimeout, set_HttpTimeout);
		L.RegVar("AliyResourceErrorStr", get_AliyResourceErrorStr, set_AliyResourceErrorStr);
		L.RegVar("FrameworkRoot", get_FrameworkRoot, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameLogic_AppConst(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameLogic.AppConst obj = new GameLogic.AppConst();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameLogic.AppConst.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameResName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.GameResName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameResPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.GameResPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameResRealPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.GameResRealPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameLuaSearchPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.GameLuaSearchPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bundleMode(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.bundleMode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isUpdate(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.isUpdate);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isGuide(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.isGuide);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOpenGM(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.isOpenGM);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isSDK(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.isSDK);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isSDKLogin(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.isSDKLogin);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOpenTLog(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.isOpenTLog);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOpenBLog(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.isOpenBLog);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_originLan(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.originLan);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChannelType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.ChannelType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DebugMode(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.DebugMode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExampleMode(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.ExampleMode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaByteMode(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.LuaByteMode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_luaBundleMode(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.luaBundleMode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLocalServer(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.IsLocalServer);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShowDebug(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.ShowDebug);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TimerInterval(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.TimerInterval);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameFrameRate(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.GameFrameRate);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Channel_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.Channel_ID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PIXELTOWORLD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.PIXELTOWORLD);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EncyptBytesLength(IntPtr L)
	{
		try
		{
			LuaDLL.tolua_pushuint64(L, GameLogic.AppConst.EncyptBytesLength);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DOWNLOAD_URL_FORMAT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.DOWNLOAD_URL_FORMAT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Platform(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.Platform);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PersistentDataPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.PersistentDataPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.StreamPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.AppName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppPrefix(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.AppPrefix);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.ExtName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourcePath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.ResourcePath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.AssetDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaTempDir(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.LuaTempDir);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetRoot(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.AssetRoot);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PlatformPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.PlatformPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameConfig_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.GameConfig_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsMaintenance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameLogic.AppConst.IsMaintenance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Download_apk_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.Download_apk_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Download_ipa_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.Download_ipa_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_JoinRoom_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.JoinRoom_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoginRoot_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.LoginRoot_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Download_Resource_Root_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.Download_Resource_Root_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Download_Resouces_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.Download_Resouces_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LaQi_JoinRoom_Url(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.LaQi_JoinRoom_Url);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadingMD5Flie(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.LoadingMD5Flie);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameVersionFile(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.GameVersionFile);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.UserId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Token(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.Token);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SdkId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.SdkId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OpenId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.OpenId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TokenStr(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.TokenStr);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MiTokenStr(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.MiTokenStr);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SdkChannel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.SdkChannel);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SdkPackageName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.SdkPackageName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Url_JoinRoomID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.Url_JoinRoomID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogToServerAddr(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.LogToServerAddr);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ToServerAddr(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.ToServerAddr);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.AppID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AppKey(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.AppKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PrivateKey(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.PrivateKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoginUrl(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.LoginUrl);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogoutUrl(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.LogoutUrl);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SDKLoginUrl(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.SDKLoginUrl);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SessionPlatform(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameLogic.AppConst.SessionPlatform);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Session(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.Session);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Code(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.Code);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectTimeout(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameLogic.AppConst.ConnectTimeout);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HttpTimeout(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameLogic.AppConst.HttpTimeout);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AliyResourceErrorStr(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.AliyResourceErrorStr);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrameworkRoot(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameLogic.AppConst.FrameworkRoot);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameResPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.GameResPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameResRealPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.GameResRealPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameLuaSearchPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.GameLuaSearchPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bundleMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.bundleMode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isUpdate(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.isUpdate = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isGuide(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.isGuide = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isOpenGM(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.isOpenGM = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isSDK(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.isSDK = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isSDKLogin(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.isSDKLogin = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isOpenTLog(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.isOpenTLog = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isOpenBLog(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.isOpenBLog = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_originLan(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.originLan = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChannelType(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.ChannelType = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DebugMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.DebugMode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExampleMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.ExampleMode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LuaByteMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.LuaByteMode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_luaBundleMode(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.luaBundleMode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsLocalServer(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.IsLocalServer = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShowDebug(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.ShowDebug = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TimerInterval(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.TimerInterval = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameFrameRate(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.GameFrameRate = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Channel_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.Channel_ID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PIXELTOWORLD(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.PIXELTOWORLD = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EncyptBytesLength(IntPtr L)
	{
		try
		{
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			GameLogic.AppConst.EncyptBytesLength = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Platform(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.Platform = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PersistentDataPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.PersistentDataPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.StreamPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AppName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.AppName = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AppPrefix(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.AppPrefix = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ExtName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.ExtName = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResourcePath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.ResourcePath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.AssetDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LuaTempDir(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.LuaTempDir = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetRoot(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.AssetRoot = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PlatformPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.PlatformPath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameConfig_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.GameConfig_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsMaintenance(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameLogic.AppConst.IsMaintenance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Download_apk_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.Download_apk_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Download_ipa_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.Download_ipa_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_JoinRoom_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.JoinRoom_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoginRoot_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.LoginRoot_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Download_Resource_Root_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.Download_Resource_Root_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Download_Resouces_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.Download_Resouces_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LaQi_JoinRoom_Url(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.LaQi_JoinRoom_Url = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserId(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.UserId = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Token(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.Token = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SdkId(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.SdkId = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OpenId(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.OpenId = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TokenStr(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.TokenStr = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MiTokenStr(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.MiTokenStr = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SdkChannel(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.SdkChannel = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SdkPackageName(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.SdkPackageName = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Url_JoinRoomID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.Url_JoinRoomID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogToServerAddr(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.LogToServerAddr = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ToServerAddr(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.ToServerAddr = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AppID(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.AppID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoginUrl(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.LoginUrl = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LogoutUrl(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.LogoutUrl = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SDKLoginUrl(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.SDKLoginUrl = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SessionPlatform(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.SessionPlatform = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Session(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.Session = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Code(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.Code = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnectTimeout(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.ConnectTimeout = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HttpTimeout(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameLogic.AppConst.HttpTimeout = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AliyResourceErrorStr(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.AppConst.AliyResourceErrorStr = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

