//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_EventTriggerListenerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.EventTriggerListener), typeof(UnityEngine.EventSystems.EventTrigger));
		L.RegFunction("Get", Get);
		L.RegFunction("OnTriggerEnter", OnTriggerEnter);
		L.RegFunction("OnTriggerExit", OnTriggerExit);
		L.RegFunction("OnTriggerStay", OnTriggerStay);
		L.RegFunction("OnCollisionEnter", OnCollisionEnter);
		L.RegFunction("OnCollisionExit", OnCollisionExit);
		L.RegFunction("OnCollisionStay", OnCollisionStay);
		L.RegFunction("OnPointerEnter", OnPointerEnter);
		L.RegFunction("OnPointerExit", OnPointerExit);
		L.RegFunction("OnPointerDown", OnPointerDown);
		L.RegFunction("OnPointerUp", OnPointerUp);
		L.RegFunction("OnPointerClick", OnPointerClick);
		L.RegFunction("OnInitializePotentialDrag", OnInitializePotentialDrag);
		L.RegFunction("OnBeginDrag", OnBeginDrag);
		L.RegFunction("OnDrag", OnDrag);
		L.RegFunction("OnEndDrag", OnEndDrag);
		L.RegFunction("OnDrop", OnDrop);
		L.RegFunction("OnScroll", OnScroll);
		L.RegFunction("OnUpdateSelected", OnUpdateSelected);
		L.RegFunction("OnSelect", OnSelect);
		L.RegFunction("OnDeselect", OnDeselect);
		L.RegFunction("OnMove", OnMove);
		L.RegFunction("OnSubmit", OnSubmit);
		L.RegFunction("OnCancel", OnCancel);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("onTriggerEnter", get_onTriggerEnter, set_onTriggerEnter);
		L.RegVar("onTriggerExit", get_onTriggerExit, set_onTriggerExit);
		L.RegVar("onTriggerStay", get_onTriggerStay, set_onTriggerStay);
		L.RegVar("onCollisionEnter", get_onCollisionEnter, set_onCollisionEnter);
		L.RegVar("onCollisionExit", get_onCollisionExit, set_onCollisionExit);
		L.RegVar("onCollisionStay", get_onCollisionStay, set_onCollisionStay);
		L.RegVar("onPointerEnter", get_onPointerEnter, set_onPointerEnter);
		L.RegVar("onPointerExit", get_onPointerExit, set_onPointerExit);
		L.RegVar("onPointerDown", get_onPointerDown, set_onPointerDown);
		L.RegVar("onPointerUp", get_onPointerUp, set_onPointerUp);
		L.RegVar("onPointerClick", get_onPointerClick, set_onPointerClick);
		L.RegVar("onInitializePotentialDrag", get_onInitializePotentialDrag, set_onInitializePotentialDrag);
		L.RegVar("onBeginDrag", get_onBeginDrag, set_onBeginDrag);
		L.RegVar("onDrag", get_onDrag, set_onDrag);
		L.RegVar("onEndDrag", get_onEndDrag, set_onEndDrag);
		L.RegVar("onDrop", get_onDrop, set_onDrop);
		L.RegVar("onScroll", get_onScroll, set_onScroll);
		L.RegVar("onUpdateSelected", get_onUpdateSelected, set_onUpdateSelected);
		L.RegVar("onSelect", get_onSelect, set_onSelect);
		L.RegVar("onDeselect", get_onDeselect, set_onDeselect);
		L.RegVar("onMove", get_onMove, set_onMove);
		L.RegVar("onSubmit", get_onSubmit, set_onSubmit);
		L.RegVar("onCancel", get_onCancel, set_onCancel);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			GameLogic.EventTriggerListener o = GameLogic.EventTriggerListener.Get(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTriggerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 2);
			obj.OnTriggerEnter(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTriggerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 2);
			obj.OnTriggerExit(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTriggerStay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 2);
			obj.OnTriggerStay(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCollisionEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.Collision arg0 = (UnityEngine.Collision)ToLua.CheckObject<UnityEngine.Collision>(L, 2);
			obj.OnCollisionEnter(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCollisionExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.Collision arg0 = (UnityEngine.Collision)ToLua.CheckObject<UnityEngine.Collision>(L, 2);
			obj.OnCollisionExit(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCollisionStay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.Collision arg0 = (UnityEngine.Collision)ToLua.CheckObject<UnityEngine.Collision>(L, 2);
			obj.OnCollisionStay(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerEnter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerEnter(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerExit(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerDown(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerUp(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnPointerClick(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitializePotentialDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnInitializePotentialDrag(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnBeginDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnBeginDrag(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnDrag(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEndDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnEndDrag(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnDrop(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnScroll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject<UnityEngine.EventSystems.PointerEventData>(L, 2);
			obj.OnScroll(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdateSelected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject<UnityEngine.EventSystems.BaseEventData>(L, 2);
			obj.OnUpdateSelected(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSelect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject<UnityEngine.EventSystems.BaseEventData>(L, 2);
			obj.OnSelect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeselect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject<UnityEngine.EventSystems.BaseEventData>(L, 2);
			obj.OnDeselect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.AxisEventData arg0 = (UnityEngine.EventSystems.AxisEventData)ToLua.CheckObject<UnityEngine.EventSystems.AxisEventData>(L, 2);
			obj.OnMove(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSubmit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject<UnityEngine.EventSystems.BaseEventData>(L, 2);
			obj.OnSubmit(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCancel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject<GameLogic.EventTriggerListener>(L, 1);
			UnityEngine.EventSystems.BaseEventData arg0 = (UnityEngine.EventSystems.BaseEventData)ToLua.CheckObject<UnityEngine.EventSystems.BaseEventData>(L, 2);
			obj.OnCancel(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onTriggerEnter(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.ColliderEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onTriggerExit(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.ColliderEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onTriggerStay(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.ColliderEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCollisionEnter(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.ColliderEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCollisionExit(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.ColliderEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCollisionStay(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.ColliderEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPointerEnter(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPointerExit(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPointerDown(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPointerUp(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPointerClick(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInitializePotentialDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onBeginDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onEndDrag(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDrop(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onScroll(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.PointerEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUpdateSelected(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.BaseEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSelect(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.BaseEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onDeselect(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.BaseEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onMove(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.AxisEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSubmit(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.BaseEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCancel(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(GameLogic.BaseEventDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onTriggerEnter(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onTriggerEnter' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onTriggerEnter += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onTriggerEnter -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onTriggerExit(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onTriggerExit' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onTriggerExit += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onTriggerExit -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onTriggerStay(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onTriggerStay' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onTriggerStay += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onTriggerStay -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCollisionEnter(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onCollisionEnter' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onCollisionEnter += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onCollisionEnter -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCollisionExit(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onCollisionExit' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onCollisionExit += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onCollisionExit -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCollisionStay(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onCollisionStay' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onCollisionStay += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.ColliderEventDelegate ev = (GameLogic.ColliderEventDelegate)arg0.func;
				obj.onCollisionStay -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPointerEnter(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onPointerEnter' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerEnter += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerEnter -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPointerExit(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onPointerExit' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerExit += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerExit -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPointerDown(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onPointerDown' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerDown += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerDown -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPointerUp(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onPointerUp' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerUp += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerUp -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPointerClick(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onPointerClick' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerClick += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onPointerClick -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInitializePotentialDrag(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onInitializePotentialDrag' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onInitializePotentialDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onInitializePotentialDrag -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onBeginDrag(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onBeginDrag' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onBeginDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onBeginDrag -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDrag(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onDrag' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onDrag -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onEndDrag(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onEndDrag' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onEndDrag += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onEndDrag -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDrop(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onDrop' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onDrop += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onDrop -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onScroll(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onScroll' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onScroll += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.PointerEventDelegate ev = (GameLogic.PointerEventDelegate)arg0.func;
				obj.onScroll -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onUpdateSelected(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onUpdateSelected' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onUpdateSelected += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onUpdateSelected -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSelect(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onSelect' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onSelect += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onSelect -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onDeselect(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onDeselect' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onDeselect += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onDeselect -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onMove(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onMove' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.AxisEventDelegate ev = (GameLogic.AxisEventDelegate)arg0.func;
				obj.onMove += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.AxisEventDelegate ev = (GameLogic.AxisEventDelegate)arg0.func;
				obj.onMove -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSubmit(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onSubmit' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onSubmit += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onSubmit -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCancel(IntPtr L)
	{
		try
		{
			GameLogic.EventTriggerListener obj = (GameLogic.EventTriggerListener)ToLua.CheckObject(L, 1, typeof(GameLogic.EventTriggerListener));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'GameLogic.EventTriggerListener.onCancel' can only appear on the left hand side of += or -= when used outside of the type 'GameLogic.EventTriggerListener'");
			}

			if (arg0.op == EventOp.Add)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onCancel += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				GameLogic.BaseEventDelegate ev = (GameLogic.BaseEventDelegate)arg0.func;
				obj.onCancel -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

