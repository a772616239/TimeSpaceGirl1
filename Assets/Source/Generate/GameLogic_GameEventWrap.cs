//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_GameEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.GameEvent), typeof(System.Object));
		L.RegFunction("AddEvent", AddEvent);
		L.RegFunction("RemoveEvent", RemoveEvent);
		L.RegFunction("DispatchEvent", DispatchEvent);
		L.RegFunction("DispatchAsyncEvent", DispatchAsyncEvent);
		L.RegFunction("HasEvent", HasEvent);
		L.RegFunction("UpdateEvent", UpdateEvent);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateGameLogic_GameEvent);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameLogic_GameEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameLogic.GameEvent obj = new GameLogic.GameEvent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameLogic.GameEvent.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				obj.AddEvent(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.AddEvent(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.GameEvent.AddEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
				obj.RemoveEvent();
				return 0;
			}
			else if (count == 2)
			{
				GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.RemoveEvent(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				obj.RemoveEvent(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.GameEvent.RemoveEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DispatchEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			obj.DispatchEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DispatchAsyncEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			obj.DispatchAsyncEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasEvent(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
			obj.UpdateEvent();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.GameEvent obj = (GameLogic.GameEvent)ToLua.CheckObject<GameLogic.GameEvent>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

