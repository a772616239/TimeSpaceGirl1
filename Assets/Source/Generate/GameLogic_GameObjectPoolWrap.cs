//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_GameObjectPoolWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.GameObjectPool), typeof(System.Object));
		L.RegFunction("NextAvailableObject", NextAvailableObject);
		L.RegFunction("ReturnObjectToPool", ReturnObjectToPool);
		L.RegFunction("ClearGameObjectPool", ClearGameObjectPool);
		L.RegFunction("New", _CreateGameLogic_GameObjectPool);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameLogic_GameObjectPool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Transform arg3 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 4);
				GameLogic.GameObjectPool obj = new GameLogic.GameObjectPool(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Transform arg3 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 4);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 5);
				GameLogic.GameObjectPool obj = new GameLogic.GameObjectPool(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameLogic.GameObjectPool.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NextAvailableObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameLogic.GameObjectPool obj = (GameLogic.GameObjectPool)ToLua.CheckObject<GameLogic.GameObjectPool>(L, 1);
				UnityEngine.GameObject o = obj.NextAvailableObject();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				GameLogic.GameObjectPool obj = (GameLogic.GameObjectPool)ToLua.CheckObject<GameLogic.GameObjectPool>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				UnityEngine.GameObject o = obj.NextAvailableObject(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.GameObjectPool.NextAvailableObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnObjectToPool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameLogic.GameObjectPool obj = (GameLogic.GameObjectPool)ToLua.CheckObject<GameLogic.GameObjectPool>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			obj.ReturnObjectToPool(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearGameObjectPool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.GameObjectPool obj = (GameLogic.GameObjectPool)ToLua.CheckObject<GameLogic.GameObjectPool>(L, 1);
			obj.ClearGameObjectPool();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

