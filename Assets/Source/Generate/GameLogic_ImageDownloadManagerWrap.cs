//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_ImageDownloadManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.ImageDownloadManager), typeof(GameCore.UnitySingleton<GameLogic.ImageDownloadManager>));
		L.RegFunction("Reset", Reset);
		L.RegFunction("SetImage_GameObject", SetImage_GameObject);
		L.RegFunction("SetImage_Image", SetImage_Image);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.ImageDownloadManager obj = (GameLogic.ImageDownloadManager)ToLua.CheckObject<GameLogic.ImageDownloadManager>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImage_GameObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				GameLogic.ImageDownloadManager obj = (GameLogic.ImageDownloadManager)ToLua.CheckObject<GameLogic.ImageDownloadManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				obj.SetImage_GameObject(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GameLogic.ImageDownloadManager obj = (GameLogic.ImageDownloadManager)ToLua.CheckObject<GameLogic.ImageDownloadManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.SetImage_GameObject(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.ImageDownloadManager.SetImage_GameObject");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImage_Image(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				GameLogic.ImageDownloadManager obj = (GameLogic.ImageDownloadManager)ToLua.CheckObject<GameLogic.ImageDownloadManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.UI.Image arg1 = (UnityEngine.UI.Image)ToLua.CheckObject<UnityEngine.UI.Image>(L, 3);
				obj.SetImage_Image(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				GameLogic.ImageDownloadManager obj = (GameLogic.ImageDownloadManager)ToLua.CheckObject<GameLogic.ImageDownloadManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.UI.Image arg1 = (UnityEngine.UI.Image)ToLua.CheckObject<UnityEngine.UI.Image>(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.SetImage_Image(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.ImageDownloadManager.SetImage_Image");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

