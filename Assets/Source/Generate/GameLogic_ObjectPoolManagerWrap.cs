//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_ObjectPoolManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.ObjectPoolManager), typeof(GameCore.UnitySingleton<GameLogic.ObjectPoolManager>));
		L.RegFunction("CreatePool", CreatePool);
		L.RegFunction("GetPool", GetPool);
		L.RegFunction("Get", Get);
		L.RegFunction("Release", Release);
		L.RegFunction("DestoryAllObjectPool", DestoryAllObjectPool);
		L.RegFunction("DestoryAllGameObjectPool", DestoryAllGameObjectPool);
		L.RegFunction("Reset", Reset);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.CheckObject(L, 4, typeof(UnityEngine.GameObject));
				GameLogic.GameObjectPool o = obj.CreatePool(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.CheckObject(L, 4, typeof(UnityEngine.GameObject));
				bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
				GameLogic.GameObjectPool o = obj.CreatePool(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.ObjectPoolManager.CreatePool");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			GameLogic.GameObjectPool o = obj.GetPool(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.GameObject o = obj.Get(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.GameObject o = obj.Get(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.ObjectPoolManager.Get");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			obj.Release(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestoryAllObjectPool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
			obj.DestoryAllObjectPool();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestoryAllGameObjectPool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
			obj.DestoryAllGameObjectPool();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.ObjectPoolManager obj = (GameLogic.ObjectPoolManager)ToLua.CheckObject<GameLogic.ObjectPoolManager>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

