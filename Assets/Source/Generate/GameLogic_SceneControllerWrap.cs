//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_SceneControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.SceneController), typeof(GameCore.Singleton<GameLogic.SceneController>));
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("New", _CreateGameLogic_SceneController);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameLogic_SceneController(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameLogic.SceneController obj = new GameLogic.SceneController();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameLogic.SceneController.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GameLogic.SceneController obj = (GameLogic.SceneController)ToLua.CheckObject<GameLogic.SceneController>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.LoadScene(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GameLogic.SceneController obj = (GameLogic.SceneController)ToLua.CheckObject<GameLogic.SceneController>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				LuaFunction arg1 = ToLua.CheckLuaFunction(L, 3);
				obj.LoadScene(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameLogic.SceneController.LoadScene");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

