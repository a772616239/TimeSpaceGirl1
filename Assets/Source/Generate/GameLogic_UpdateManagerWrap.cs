//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_UpdateManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.UpdateManager), typeof(GameCore.Singleton<GameLogic.UpdateManager>));
		L.RegFunction("StartUp", StartUp);
		L.RegFunction("GetCRC32Table", GetCRC32Table);
		L.RegFunction("GetCRC32Str", GetCRC32Str);
		L.RegFunction("PostServerInfo", PostServerInfo);
		L.RegFunction("UpdateResources", UpdateResources);
		L.RegFunction("UnLoadUpdateAsset", UnLoadUpdateAsset);
		L.RegFunction("New", _CreateGameLogic_UpdateManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameLogic_UpdateManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameLogic.UpdateManager obj = new GameLogic.UpdateManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameLogic.UpdateManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.UpdateManager obj = (GameLogic.UpdateManager)ToLua.CheckObject<GameLogic.UpdateManager>(L, 1);
			obj.StartUp();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCRC32Table(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.UpdateManager obj = (GameLogic.UpdateManager)ToLua.CheckObject<GameLogic.UpdateManager>(L, 1);
			obj.GetCRC32Table();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCRC32Str(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.UpdateManager obj = (GameLogic.UpdateManager)ToLua.CheckObject<GameLogic.UpdateManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ulong o = obj.GetCRC32Str(arg0);
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostServerInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.UpdateManager obj = (GameLogic.UpdateManager)ToLua.CheckObject<GameLogic.UpdateManager>(L, 1);
			string o = obj.PostServerInfo();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.UpdateManager obj = (GameLogic.UpdateManager)ToLua.CheckObject<GameLogic.UpdateManager>(L, 1);
			System.Action<bool,ResUpdate.ResourcesUpdateState,object> arg0 = (System.Action<bool,ResUpdate.ResourcesUpdateState,object>)ToLua.CheckDelegate<System.Action<bool,ResUpdate.ResourcesUpdateState,object>>(L, 2);
			obj.UpdateResources(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadUpdateAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.UpdateManager obj = (GameLogic.UpdateManager)ToLua.CheckObject<GameLogic.UpdateManager>(L, 1);
			obj.UnLoadUpdateAsset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

