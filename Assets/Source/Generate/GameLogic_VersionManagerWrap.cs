//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameLogic_VersionManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameLogic.VersionManager), typeof(GameCore.Singleton<GameLogic.VersionManager>));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("InitVersions", InitVersions);
		L.RegFunction("SaveVersion", SaveVersion);
		L.RegFunction("GetLocalVersion", GetLocalVersion);
		L.RegFunction("VersionCompare", VersionCompare);
		L.RegFunction("GetVersionInfo", GetVersionInfo);
		L.RegFunction("GetVersionInfoStream", GetVersionInfoStream);
		L.RegFunction("CheckPackageVersionSame", CheckPackageVersionSame);
		L.RegFunction("New", _CreateGameLogic_VersionManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameLogic_VersionManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameLogic.VersionManager obj = new GameLogic.VersionManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameLogic.VersionManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.VersionManager obj = (GameLogic.VersionManager)ToLua.CheckObject<GameLogic.VersionManager>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitVersions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.VersionManager obj = (GameLogic.VersionManager)ToLua.CheckObject<GameLogic.VersionManager>(L, 1);
			obj.InitVersions();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SaveVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.VersionManager obj = (GameLogic.VersionManager)ToLua.CheckObject<GameLogic.VersionManager>(L, 1);
			ResUpdate.VersionPar arg0 = (ResUpdate.VersionPar)ToLua.CheckObject<ResUpdate.VersionPar>(L, 2);
			obj.SaveVersion(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLocalVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameLogic.VersionManager obj = (GameLogic.VersionManager)ToLua.CheckObject<GameLogic.VersionManager>(L, 1);
			string o = obj.GetLocalVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int VersionCompare(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int o = GameLogic.VersionManager.VersionCompare(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVersionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.VersionManager obj = (GameLogic.VersionManager)ToLua.CheckObject<GameLogic.VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetVersionInfo(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVersionInfoStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameLogic.VersionManager obj = (GameLogic.VersionManager)ToLua.CheckObject<GameLogic.VersionManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetVersionInfoStream(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckPackageVersionSame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = GameLogic.VersionManager.CheckPackageVersionSame(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

