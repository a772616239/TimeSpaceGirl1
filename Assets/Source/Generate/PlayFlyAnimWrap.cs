//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PlayFlyAnimWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PlayFlyAnim), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("PlayAnim", PlayAnim);
		L.RegFunction("PlayHideAnim", PlayHideAnim);
		L.RegFunction("AddOrRemoveMask", AddOrRemoveMask);
		L.RegFunction("Reset", Reset);
		L.RegFunction("LastFrame", LastFrame);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("tweenSequeue", get_tweenSequeue, set_tweenSequeue);
		L.RegVar("isPlayAudio", get_isPlayAudio, set_isPlayAudio);
		L.RegVar("isHaveCloseBtn", get_isHaveCloseBtn, set_isHaveCloseBtn);
		L.RegVar("isPlayOnOpen", get_isPlayOnOpen, set_isPlayOnOpen);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAnim(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
				obj.PlayAnim();
				return 0;
			}
			else if (count == 2)
			{
				PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.PlayAnim(arg0);
				return 0;
			}
			else if (count == 3)
			{
				PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.PlayAnim(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayFlyAnim.PlayAnim");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayHideAnim(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
				obj.PlayHideAnim();
				return 0;
			}
			else if (count == 2)
			{
				PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
				System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
				obj.PlayHideAnim(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PlayFlyAnim.PlayHideAnim");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOrRemoveMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AddOrRemoveMask(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LastFrame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)ToLua.CheckObject<PlayFlyAnim>(L, 1);
			obj.LastFrame();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tweenSequeue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			ChangeTween[] ret = obj.tweenSequeue;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tweenSequeue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPlayAudio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			bool ret = obj.isPlayAudio;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlayAudio on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isHaveCloseBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			bool ret = obj.isHaveCloseBtn;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isHaveCloseBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPlayOnOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			bool ret = obj.isPlayOnOpen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlayOnOpen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tweenSequeue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			ChangeTween[] arg0 = ToLua.CheckObjectArray<ChangeTween>(L, 2);
			obj.tweenSequeue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tweenSequeue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isPlayAudio(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isPlayAudio = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlayAudio on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isHaveCloseBtn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isHaveCloseBtn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isHaveCloseBtn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isPlayOnOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PlayFlyAnim obj = (PlayFlyAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isPlayOnOpen = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlayOnOpen on a nil value");
		}
	}
}

