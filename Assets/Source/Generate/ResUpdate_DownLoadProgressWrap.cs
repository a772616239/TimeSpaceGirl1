//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ResUpdate_DownLoadProgressWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ResUpdate.DownLoadProgress), typeof(System.Object));
		L.RegFunction("New", _CreateResUpdate_DownLoadProgress);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Size", get_Size, null);
		L.RegVar("SizeKB", get_SizeKB, null);
		L.RegVar("SizeMB", get_SizeMB, null);
		L.RegVar("TotalSize", get_TotalSize, null);
		L.RegVar("TotalSizeKB", get_TotalSizeKB, null);
		L.RegVar("TotalSizeMB", get_TotalSizeMB, null);
		L.RegVar("Progress", get_Progress, null);
		L.RegVar("LoadSpeed", get_LoadSpeed, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateResUpdate_DownLoadProgress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ResUpdate.DownLoadProgress obj = new ResUpdate.DownLoadProgress();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ResUpdate.DownLoadProgress.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			long ret = obj.Size;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SizeKB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			float ret = obj.SizeKB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SizeKB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SizeMB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			float ret = obj.SizeMB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SizeMB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			long ret = obj.TotalSize;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalSizeKB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			float ret = obj.TotalSizeKB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalSizeKB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalSizeMB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			float ret = obj.TotalSizeMB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalSizeMB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.DownLoadProgress obj = (ResUpdate.DownLoadProgress)o;
			float ret = obj.LoadSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadSpeed on a nil value");
		}
	}
}

