//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ResUpdate_ResUpdateProgressWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ResUpdate.ResUpdateProgress), typeof(System.Object));
		L.RegFunction("Reset", Reset);
		L.RegFunction("New", _CreateResUpdate_ResUpdateProgress);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("SuccessNum", get_SuccessNum, set_SuccessNum);
		L.RegVar("FailedNum", get_FailedNum, set_FailedNum);
		L.RegVar("TotalNum", get_TotalNum, set_TotalNum);
		L.RegVar("Size", get_Size, set_Size);
		L.RegVar("SizeKB", get_SizeKB, null);
		L.RegVar("SizeMB", get_SizeMB, null);
		L.RegVar("TotalSize", get_TotalSize, set_TotalSize);
		L.RegVar("totalSizeKB", get_totalSizeKB, null);
		L.RegVar("TotalSizeMB", get_TotalSizeMB, null);
		L.RegVar("Progress", get_Progress, null);
		L.RegVar("IsFinish", get_IsFinish, null);
		L.RegVar("LoadSpeed", get_LoadSpeed, set_LoadSpeed);
		L.RegVar("IsSuccess", get_IsSuccess, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateResUpdate_ResUpdateProgress(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ResUpdate.ResUpdateProgress obj = new ResUpdate.ResUpdateProgress();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ResUpdate.ResUpdateProgress.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)ToLua.CheckObject<ResUpdate.ResUpdateProgress>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SuccessNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			int ret = obj.SuccessNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SuccessNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FailedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			int ret = obj.FailedNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FailedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			int ret = obj.TotalNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			long ret = obj.Size;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SizeKB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			float ret = obj.SizeKB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SizeKB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SizeMB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			float ret = obj.SizeMB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SizeMB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			long ret = obj.TotalSize;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_totalSizeKB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			float ret = obj.totalSizeKB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index totalSizeKB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TotalSizeMB(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			float ret = obj.TotalSizeMB;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalSizeMB on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			float ret = obj.Progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFinish(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			bool ret = obj.IsFinish;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFinish on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoadSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			float ret = obj.LoadSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSuccess(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			bool ret = obj.IsSuccess;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSuccess on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SuccessNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SuccessNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SuccessNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FailedNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.FailedNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FailedNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TotalNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.TotalNum = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.Size = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TotalSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.TotalSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TotalSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoadSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ResUpdate.ResUpdateProgress obj = (ResUpdate.ResUpdateProgress)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.LoadSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LoadSpeed on a nil value");
		}
	}
}

