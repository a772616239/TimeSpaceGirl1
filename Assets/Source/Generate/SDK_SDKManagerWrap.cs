//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SDK_SDKManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SDK.SDKManager), typeof(GameCore.UnitySingleton<SDK.SDKManager>));
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("Init", Init);
		L.RegFunction("Login", Login);
		L.RegFunction("Logout", Logout);
		L.RegFunction("SubmitExtraData", SubmitExtraData);
		L.RegFunction("Pay", Pay);
		L.RegFunction("IsSupportExit", IsSupportExit);
		L.RegFunction("ExitGame", ExitGame);
		L.RegFunction("GetPayOrderID", GetPayOrderID);
		L.RegFunction("Bind", Bind);
		L.RegFunction("Community", Community);
		L.RegFunction("CustomerService", CustomerService);
		L.RegFunction("Relation", Relation);
		L.RegFunction("Cancellation", Cancellation);
		L.RegFunction("IsCDKey", IsCDKey);
		L.RegFunction("CDKey", CDKey);
		L.RegFunction("LoginPanel_Btn1", LoginPanel_Btn1);
		L.RegFunction("LoginPanel_Btn2", LoginPanel_Btn2);
		L.RegFunction("CustomEvent", CustomEvent);
		L.RegFunction("InitCallback", InitCallback);
		L.RegFunction("RegisterCallback", RegisterCallback);
		L.RegFunction("LoginCallback", LoginCallback);
		L.RegFunction("PayCallback", PayCallback);
		L.RegFunction("SwitchAccountCallback", SwitchAccountCallback);
		L.RegFunction("LogoutCallback", LogoutCallback);
		L.RegFunction("MessageCallback", MessageCallback);
		L.RegFunction("SetSeverData", SetSeverData);
		L.RegFunction("DebugSdk", DebugSdk);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("onInitLaunchCallback", get_onInitLaunchCallback, set_onInitLaunchCallback);
		L.RegVar("onRegisterCallback", get_onRegisterCallback, set_onRegisterCallback);
		L.RegVar("onLoginCallback", get_onLoginCallback, set_onLoginCallback);
		L.RegVar("onPayCallback", get_onPayCallback, set_onPayCallback);
		L.RegVar("onSwitchAccountCallback", get_onSwitchAccountCallback, set_onSwitchAccountCallback);
		L.RegVar("onLogoutCallback", get_onLogoutCallback, set_onLogoutCallback);
		L.RegVar("onMessageCallback", get_onMessageCallback, set_onMessageCallback);
		L.RegVar("IsInit", get_IsInit, null);
		L.RegFunction("MessageAction", SDK_SDKManager_MessageAction);
		L.RegFunction("LogoutAction", SDK_SDKManager_LogoutAction);
		L.RegFunction("SwitchAccountAction", SDK_SDKManager_SwitchAccountAction);
		L.RegFunction("PayAction", SDK_SDKManager_PayAction);
		L.RegFunction("LoginAction", SDK_SDKManager_LoginAction);
		L.RegFunction("RegisterAction", SDK_SDKManager_RegisterAction);
		L.RegFunction("InitLaunchAction", SDK_SDKManager_InitLaunchAction);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.Login();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Logout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.Logout();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SubmitExtraData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			SDK.SDKSubmitExtraDataArgs arg0 = StackTraits<SDK.SDKSubmitExtraDataArgs>.Check(L, 2);
			obj.SubmitExtraData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			SDK.SDKPayArgs arg0 = StackTraits<SDK.SDKPayArgs>.Check(L, 2);
			obj.Pay(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSupportExit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			bool o = obj.IsSupportExit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExitGame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.ExitGame();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPayOrderID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string o = obj.GetPayOrderID();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Bind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.Bind();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Community(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.Community();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CustomerService(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.CustomerService();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Relation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Relation(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cancellation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.Cancellation();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCDKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			bool o = obj.IsCDKey();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CDKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.CDKey(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoginPanel_Btn1(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.LoginPanel_Btn1();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoginPanel_Btn2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			obj.LoginPanel_Btn2();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CustomEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.CustomEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.InitCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.RegisterCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoginCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.LoginCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PayCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.PayCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwitchAccountCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SwitchAccountCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogoutCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.LogoutCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MessageCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.MessageCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSeverData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetSeverData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DebugSdk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SDK.SDKManager obj = (SDK.SDKManager)ToLua.CheckObject<SDK.SDKManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DebugSdk(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onInitLaunchCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.InitLaunchAction ret = obj.onInitLaunchCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onInitLaunchCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onRegisterCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.RegisterAction ret = obj.onRegisterCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onRegisterCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onLoginCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.LoginAction ret = obj.onLoginCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onLoginCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onPayCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.PayAction ret = obj.onPayCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onPayCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onSwitchAccountCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.SwitchAccountAction ret = obj.onSwitchAccountCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onSwitchAccountCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onLogoutCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.LogoutAction ret = obj.onLogoutCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onLogoutCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onMessageCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.MessageAction ret = obj.onMessageCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onMessageCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsInit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			bool ret = obj.IsInit;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsInit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onInitLaunchCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.InitLaunchAction arg0 = (SDK.SDKManager.InitLaunchAction)ToLua.CheckDelegate<SDK.SDKManager.InitLaunchAction>(L, 2);
			obj.onInitLaunchCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onInitLaunchCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onRegisterCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.RegisterAction arg0 = (SDK.SDKManager.RegisterAction)ToLua.CheckDelegate<SDK.SDKManager.RegisterAction>(L, 2);
			obj.onRegisterCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onRegisterCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onLoginCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.LoginAction arg0 = (SDK.SDKManager.LoginAction)ToLua.CheckDelegate<SDK.SDKManager.LoginAction>(L, 2);
			obj.onLoginCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onLoginCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onPayCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.PayAction arg0 = (SDK.SDKManager.PayAction)ToLua.CheckDelegate<SDK.SDKManager.PayAction>(L, 2);
			obj.onPayCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onPayCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onSwitchAccountCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.SwitchAccountAction arg0 = (SDK.SDKManager.SwitchAccountAction)ToLua.CheckDelegate<SDK.SDKManager.SwitchAccountAction>(L, 2);
			obj.onSwitchAccountCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onSwitchAccountCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onLogoutCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.LogoutAction arg0 = (SDK.SDKManager.LogoutAction)ToLua.CheckDelegate<SDK.SDKManager.LogoutAction>(L, 2);
			obj.onLogoutCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onLogoutCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onMessageCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SDK.SDKManager obj = (SDK.SDKManager)o;
			SDK.SDKManager.MessageAction arg0 = (SDK.SDKManager.MessageAction)ToLua.CheckDelegate<SDK.SDKManager.MessageAction>(L, 2);
			obj.onMessageCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onMessageCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDK_SDKManager_MessageAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDK.SDKManager.MessageAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDK.SDKManager.MessageAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDK_SDKManager_LogoutAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDK.SDKManager.LogoutAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDK.SDKManager.LogoutAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDK_SDKManager_SwitchAccountAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDK.SDKManager.SwitchAccountAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDK.SDKManager.SwitchAccountAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDK_SDKManager_PayAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDK.SDKManager.PayAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDK.SDKManager.PayAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDK_SDKManager_LoginAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDK.SDKManager.LoginAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDK.SDKManager.LoginAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDK_SDKManager_RegisterAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDK.SDKManager.RegisterAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDK.SDKManager.RegisterAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SDK_SDKManager_InitLaunchAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<SDK.SDKManager.InitLaunchAction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<SDK.SDKManager.InitLaunchAction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

