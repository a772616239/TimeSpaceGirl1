//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnrealM_SpriteAnimationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnrealM.SpriteAnimation), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Stop", Stop);
		L.RegFunction("Update", Update);
		L.RegFunction("Play", Play);
		L.RegFunction("PlayClamp", PlayClamp);
		L.RegFunction("OnFrame", OnFrame);
		L.RegFunction("OnComplete", OnComplete);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("frameAnimation", get_frameAnimation, set_frameAnimation);
		L.RegVar("autoPlay", get_autoPlay, set_autoPlay);
		L.RegVar("isHiddenAtAwake", get_isHiddenAtAwake, set_isHiddenAtAwake);
		L.RegVar("endMode", get_endMode, set_endMode);
		L.RegVar("onComplete", get_onComplete, set_onComplete);
		L.RegVar("nCurClipIndex", get_nCurClipIndex, set_nCurClipIndex);
		L.RegVar("clips", get_clips, set_clips);
		L.RegVar("isPlaying", get_isPlaying, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)ToLua.CheckObject<UnrealM.SpriteAnimation>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)ToLua.CheckObject<UnrealM.SpriteAnimation>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)ToLua.CheckObject<UnrealM.SpriteAnimation>(L, 1);
				obj.Play();
				return 0;
			}
			else if (count == 2)
			{
				UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)ToLua.CheckObject<UnrealM.SpriteAnimation>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.Play(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnrealM.SpriteAnimation.Play");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayClamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)ToLua.CheckObject<UnrealM.SpriteAnimation>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.PlayClamp(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnFrame(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)ToLua.CheckObject<UnrealM.SpriteAnimation>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.OnFrame(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)ToLua.CheckObject<UnrealM.SpriteAnimation>(L, 1);
			obj.OnComplete();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_frameAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			UnrealM.FrameAnimation ret = obj.frameAnimation;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index frameAnimation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoPlay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			bool ret = obj.autoPlay;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoPlay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isHiddenAtAwake(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			bool ret = obj.isHiddenAtAwake;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isHiddenAtAwake on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_endMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			UnrealM.SpriteAnimation.EndMode ret = obj.endMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			System.Action ret = obj.onComplete;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nCurClipIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			int ret = obj.nCurClipIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nCurClipIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_clips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			UnrealM.SpriteAnimationClip ret = obj.clips;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPlaying(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			bool ret = obj.isPlaying;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlaying on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_frameAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			UnrealM.FrameAnimation arg0 = (UnrealM.FrameAnimation)ToLua.CheckObject<UnrealM.FrameAnimation>(L, 2);
			obj.frameAnimation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index frameAnimation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoPlay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.autoPlay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index autoPlay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isHiddenAtAwake(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isHiddenAtAwake = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isHiddenAtAwake on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_endMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			UnrealM.SpriteAnimation.EndMode arg0 = (UnrealM.SpriteAnimation.EndMode)ToLua.CheckObject(L, 2, typeof(UnrealM.SpriteAnimation.EndMode));
			obj.endMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index endMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.onComplete = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nCurClipIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.nCurClipIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nCurClipIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_clips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnrealM.SpriteAnimation obj = (UnrealM.SpriteAnimation)o;
			UnrealM.SpriteAnimationClip arg0 = (UnrealM.SpriteAnimationClip)ToLua.CheckObject<UnrealM.SpriteAnimationClip>(L, 2);
			obj.clips = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index clips on a nil value");
		}
	}
}

