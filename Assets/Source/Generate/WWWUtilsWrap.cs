//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WWWUtilsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WWWUtils), typeof(System.Object));
		L.RegFunction("StopAllWWWCoroutine", StopAllWWWCoroutine);
		L.RegFunction("StopWWWCoroutine", StopWWWCoroutine);
		L.RegFunction("RequestText", RequestText);
		L.RegFunction("RequestTexture", RequestTexture);
		L.RegFunction("RequestAudio", RequestAudio);
		L.RegFunction("RequestAssetBundle", RequestAssetBundle);
		L.RegFunction("RequestBytes", RequestBytes);
		L.RegFunction("UploadScreenShot", UploadScreenShot);
		L.RegFunction("New", _CreateWWWUtils);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateWWWUtils(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				WWWUtils obj = new WWWUtils();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: WWWUtils.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllWWWCoroutine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			WWWUtils.StopAllWWWCoroutine();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopWWWCoroutine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Coroutine arg0 = (UnityEngine.Coroutine)ToLua.CheckObject(L, 1, typeof(UnityEngine.Coroutine));
			WWWUtils.StopWWWCoroutine(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestText(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				WWWUtils.RequestText(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				WWWUtils.RequestText(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<GameLogic.GameEventHandler>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 2);
				WWWUtils.RequestText(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				WWWUtils.RequestText(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], GameLogic.GameEventHandler>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				WWWUtils.RequestText(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<GameLogic.GameEventHandler, GameLogic.GameEventHandler>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				WWWUtils.RequestText(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, GameLogic.GameEventHandler>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				WWWUtils.RequestText(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, GameLogic.GameEventHandler, GameLogic.GameEventHandler>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				GameLogic.GameEventHandler arg3 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 4);
				WWWUtils.RequestText(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<GameLogic.GameEventHandler, GameLogic.GameEventHandler, int>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				WWWUtils.RequestText(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], GameLogic.GameEventHandler, GameLogic.GameEventHandler>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				GameLogic.GameEventHandler arg3 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 4);
				WWWUtils.RequestText(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, GameLogic.GameEventHandler, GameLogic.GameEventHandler, int>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				GameLogic.GameEventHandler arg3 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				WWWUtils.RequestText(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<byte[], GameLogic.GameEventHandler, GameLogic.GameEventHandler, int>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 3);
				GameLogic.GameEventHandler arg3 = (GameLogic.GameEventHandler)ToLua.ToObject(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				WWWUtils.RequestText(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWUtils.RequestText");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				WWWUtils.RequestTexture(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				WWWUtils.RequestTexture(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				WWWUtils.RequestTexture(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				WWWUtils.RequestTexture(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWUtils.RequestTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestAudio(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				WWWUtils.RequestAudio(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				WWWUtils.RequestAudio(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				WWWUtils.RequestAudio(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				WWWUtils.RequestAudio(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWUtils.RequestAudio");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestAssetBundle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				WWWUtils.RequestAssetBundle(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				WWWUtils.RequestAssetBundle(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				WWWUtils.RequestAssetBundle(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				WWWUtils.RequestAssetBundle(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWUtils.RequestAssetBundle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				WWWUtils.RequestBytes(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				WWWUtils.RequestBytes(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				WWWUtils.RequestBytes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameLogic.GameEventHandler arg1 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 2);
				GameLogic.GameEventHandler arg2 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				WWWUtils.RequestBytes(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWUtils.RequestBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UploadScreenShot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 7)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else if (count == 8)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				string arg7 = ToLua.CheckString(L, 8);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return 0;
			}
			else if (count == 9)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				string arg7 = ToLua.CheckString(L, 8);
				GameLogic.GameEventHandler arg8 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 9);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return 0;
			}
			else if (count == 10)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				string arg7 = ToLua.CheckString(L, 8);
				GameLogic.GameEventHandler arg8 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 9);
				GameLogic.GameEventHandler arg9 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 10);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return 0;
			}
			else if (count == 11)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				string arg7 = ToLua.CheckString(L, 8);
				GameLogic.GameEventHandler arg8 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 9);
				GameLogic.GameEventHandler arg9 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 10);
				GameLogic.GameEventHandler arg10 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 11);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return 0;
			}
			else if (count == 12)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				string arg7 = ToLua.CheckString(L, 8);
				GameLogic.GameEventHandler arg8 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 9);
				GameLogic.GameEventHandler arg9 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 10);
				GameLogic.GameEventHandler arg10 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 11);
				GameLogic.GameEventHandler arg11 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 12);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
				return 0;
			}
			else if (count == 13)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				int arg5 = (int)LuaDLL.luaL_checknumber(L, 6);
				int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
				string arg7 = ToLua.CheckString(L, 8);
				GameLogic.GameEventHandler arg8 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 9);
				GameLogic.GameEventHandler arg9 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 10);
				GameLogic.GameEventHandler arg10 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 11);
				GameLogic.GameEventHandler arg11 = (GameLogic.GameEventHandler)ToLua.CheckDelegate<GameLogic.GameEventHandler>(L, 12);
				int arg12 = (int)LuaDLL.luaL_checknumber(L, 13);
				WWWUtils.UploadScreenShot(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WWWUtils.UploadScreenShot");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

