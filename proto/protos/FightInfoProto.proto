package com.ljsd.jieling.protocols;

option optimize_for = SPEED;

import "CommonProto.proto";

// request 编号需要小于 response 编号

	// 战斗开始
	message FightStartRequest {
		// 战斗类型（手动，自动）
		optional int32 fightType = 1;
		optional int32 type = 2; // 类型 1: 关卡 2：地图 3：精英怪 4:爬塔副本 5 ：妖兽 15 ：三强争霸
		optional int32 fightId = 3;
		optional int32 teamId = 4;  //队伍id
		optional int32 rank = 5;//三强争霸层级
		optional int32 pos = 6;//三强争霸位置
		optional int32 level = 7;//加强等级
		optional int32 buffid = 8;//buffid
	}
	message FightStartResponse {
		// 战斗属性
		optional FightData fightData = 1;
	}
	
	// 战斗结束
	message FightEndRequest {
		// 怪物组id（接战斗验证后可删除）
		optional int32 monsterGroupId = 1;
		// 战斗序列帧 14#1#0|14#1#0|14#1#0|...|14#1#0
		optional string frames = 2;
		optional int32 fightId = 3;
		optional int32 type = 4; // 类型 1: 关卡 2：地图 3：精英怪 4:爬塔副本  5：妖兽 6： 新关卡
		optional int32 dropout = 5 ;// 是否退出 1 ：退出
		optional int32 teamId = 6;//队伍id
		optional int32 useTime = 7;//战斗耗时
		optional int32 result = 8;//客户端战斗结果
	}

	message UpdateUserExpIndicaiton{
		optional int32 level = 1 ;// 玩家等级
		optional int32 exp  =2 ; // 玩家经验
	}

	message FightEndResponse {
		//战斗结果
		optional int32 result = 1;
		// 事件获得的道具
		optional Drop enventDrop = 2; //工会boss代表基础掉落
		// 任务获得的道具
		optional Drop missionDrop = 3; // 工会boss代表随机掉落
		//英雄剩余血量
		repeated int64 remainHpList = 4;
		// 更新主线任务
		optional Mission mission = 5;
		// 探索地图剩余时间（秒）
		optional int32 leftTime = 6; 
		// eventPointConfig id
		optional int32 eventId = 7;
		// 试炼时间（最后一层专用）
		optional int32 lastTowerTime = 8;
		// 试炼精气
		optional int32 essenceValue = 9; // 工会boss代表伤害值 试炼副本代表精气值
		optional int32 lastXY =10; //失败回退到上一步的位置坐标
		optional UpdateUserExpIndicaiton UpdateUserExpIndicaiton = 11;//经验
		optional Title title = 12;  //称号
	}

	message GetTankInfoOfTeamRequest {
	    optional int32 teamId = 1;
	}
    message GetTankInfoOfTeamResponse {
        repeated TankInfo tankInfo = 1;
    }


	// 快速战斗
	message FastFightResponse {
		//战斗结果
		optional int32 result = 1;
		// 事件获得的道具
		optional Drop enventDrop = 2;
		// 任务获得的道具
		optional Drop missionDrop = 3;
		//英雄剩余血量
		repeated int64 remainHpList = 4;
		// 更新主线任务
		optional Mission mission = 5;
		// 探索地图剩余时间（秒）
		optional int32 leftTime = 6; 
		// 试炼精气
		optional int32 essenceValue = 7;
		optional int32 lastXY =8; //失败回退到上一步的位置坐标

		optional int32 testXY = 9; // 测试数据
		
		optional FightData fightData = 10;//战斗数据
		
		optional Cell cell = 11;//试炼副本添加传送门

	}


		// 扫荡开始
	message SweepRightRequest {
		optional int32 type = 1; //1 :关卡
		optional int32 fightId = 2;
		optional int32 num = 3; //扫荡次数
		optional int32 targetItemId =4 ;//目标物品
		optional int32 targetItemNum=5;// 获取奖励

	}
	message SweepRightResponse {
		// 获得的道具
		optional Drop Drop = 1; // 基础奖励
		optional Drop randomDrop =2 ; // 随机奖励
		optional ItemInfo ItemInfo =3;
		optional int32 hurt = 4;
		optional FightData fightData=5 ; //战斗数据
	}

	message FightRePlayRequest{
		optional int32 type =1; // 类型 1： 竞技场
		optional string fightId =2; // fight 动态Id
		optional int32 rank=3;//层数
		optional int32 pos=4;//位置
		
	}

	message FightRePlayResponse{
		optional  FightData fightData =1; 
	}
               
                message GameLevelFightRePlayRequest{
		optional  int32 fightId =1; //关卡id
	}

                message GameLevelFightRePlayResponse{
		repeated  FightRePlayPopupData levelData =1; //关卡数据
	}

	message TakeAventureRewardRequest{
		optional int32 type =1; //1：花费材料快速领取 2：普通领取
		optional int32 position = 2; // 驻扎区域编号 -1标示一键领取
	}

	message TakeAventureRewardResponse{
		optional Drop Drop = 1; //基础奖励
		optional Drop randomDrop =2; // 随机奖励
	}


	message AdventureUpLevelRequest{
		optional int32 arenaId =1; // 区域id
	}


	message AdventurnChallengeRequest{
		optional int32 arenaId =1; // 区域id
		optional int32 teamId =2 ; // 队伍id
		optional int32 skipFight =3; //是否跳过战斗
	}

	message AdventurnChallengeResponse{
		optional int32 fightResult =1; // 战斗结果。
		optional FightData fightData =2 ;// 战斗数据 
	}

	message AdventureBossInfoResponse{
		repeated AdventureBossInfo adventureBossInfo=1;
	}

	message AdventurenBossChallengeRequest{
		optional string bossId =1; //出现区域boss
		optional int32 teamId =2; // 进攻队伍id
		optional int32 fightTimes =3;// 进攻次数
		optional int32 skipFight =4 ;// 是否跳过战斗 1:跳过 0：不跳过
	}

	message AdventurenBossChallengeResponse{
		optional int32 hurtNums =1; // 打boss血量
		optional FightData fightData =2;
		optional int32 fightResult = 3;// 是否被击杀 1：击杀 0：未击杀
		optional int32 consumeFightTimes = 4; //本次消耗次数
		optional string killRewards = 5 ; //击杀奖励
		optional int64 bossTotalHp = 6; //boss 总血量
		optional int64 bossRemainHp = 7 ;// boss 剩余血量

	}

	message AdventureBossKillIndication{
		optional int32 pos = 1; //层数
		optional string bossId=2;// bossId
	}

	message AdventureBossShareRequest{
		optional string bossId =1 ; // 分享的bossId
	}

	message AdventurnRankRequest{
		optional int32 page =1; //请求排行榜的页数
	}

	message AdventurnRankResponse{
		repeated AdventureRankItemInfo adventureRankItemInfo =1;
		optional AdventureRankItemInfo myInfo =2;
	}

	message AdventureBossFindIndication{
		optional AdventureBossInfo adventureBossInfo =1;
	}

	message AdventureLeftRequest{
		optional int32 type =1; // 0 ：离开，1：进入
	}

	message AdventureCallBossResponse{
		optional AdventureBossInfo adventureBossInfo =1;
	}

		
	message QuickStartMonsterFightRequest{
		optional int32 fightId = 1;
		optional int32 teamId = 2;  //队伍id
	}


	message QuickStartMonsterFightResponse{
		//战斗结果
		optional int32 result = 1;
		// 事件获得的道具
		optional Drop enventDrop = 2;

		optional FightData fightData =3; 
	}
	

	message MainLevelRankInfoResponse{
		repeated MainLevelRankInfo MainLevelRankInfo = 1;
		optional MainLevelRankInfo myMainLevelRankInfo =2;
	}

	message MainLevelFightUpdateIndication{
		optional int32 fightId = 1;//关卡id
		optional int32 state =2;// 状态
	}
	
	message FastFightChallengeRequest{
		optional int32 type = 1 ; //类型 1：车迟斗法挑战boss 2：车迟斗法抢夺
		optional int32 challeageId = 2 ; //挑战id
		optional bool sweep = 3;//扫荡true
	}
	
	message FastFightChallengeResponse{
		optional int32 score =  1; //获取积分信息
		optional int32 hurt = 2 ;// 伤害值
		optional FightData fightData = 3;
		optional int64 totalHurt = 4;//总伤害
	}


	message VirtualBattleFightUpdateIndication{
		optional int32 fightId = 1;//关卡id
		optional int32 state =2;// 状态
	}


    message VirtualBattleFightRePlayRequest{
		optional  int32 fightId = 1; //关卡id
		optional  int32 uid = 2; //玩家id
	}

    message VirtualBattleFightRePlayResponse{
		repeated  FightRePlayPopupData data =1; //关卡战斗数据
	}

    message DefTrainingBattleFightUpdateIndication{
        optional int32 fightId = 1;//关卡id
    }
